'''
task 1
1. Реализовать скрипт, в котором должна быть предусмотрена функция расчёта заработной платы сотрудника.
Используйте в нём формулу: (выработка в часах*ставка в час) + премия.
 Во время выполнения расчёта для конкретных значений необходимо запускать скрипт с параметрами.

 employee_salary заработная плата сотрудника
 выработка production
 ставка wage_rate
 премия bonus
'''

from sys import argv

name, production, wage_rate, bonus = argv

employee_salary = (int(production) * int(wage_rate)) + int(bonus)
print(f"ЗП сотрудника {employee_salary}")
'''
task 2
Представлен список чисел.
Необходимо вывести элементы исходного списка,
значения которых больше предыдущего элемента
'''
my_list = [36, 20, 90, 5, 10, 8, 11, 60, 150, 1, 1, 2, 6, 9, 45]
new_list = [el for el in my_list if el > my_list[my_list.index(el)-1]]
print(new_list)
'''
task 3
Для чисел в пределах от 20 до 240 найти числа, кратные 20 или 21.
 Решите задание в одну строку
'''
print([el for el in range(20, 241) if el%20==0 or el%21==0])
'''
task 4
4. Представлен список чисел. Определите элементы списка, не имеющие повторений.
 Сформируйте итоговый массив чисел, соответствующих требованию.
 Элементы выведите в порядке их следования в исходном списке.
 Для выполнения задания обязательно используйте генератор
'''
my_list = [13, 121, 34, 445, 56, 89, 89, 89, 11, 11, 5, 5, 1, 3]
print("Исходный список: ", my_list)
new_list = [el for el in my_list if my_list.count(el) == 1]
print("Список без повторений: ", new_list)
'''
task 5
Реализовать формирование списка, используя функцию range() и возможности генератора.
 В список должны войти чётные числа от 100 до 1000 (включая границы).
  Нужно получить результат вычисления произведения всех элементов списка
'''
from functools import reduce


def my_func(prev_el, el):
    return prev_el * el


my_list = [el for el in range(100, 1001, 2)]
print(my_list)
print(reduce(my_func, my_list))
'''
task 6
Реализовать два небольших скрипта:
а) итератор, генерирующий целые числа, начиная с указанного;
б) итератор, повторяющий элементы некоторого списка, определённого заранее.
Подсказка: используйте функцию count() и cycle() модуля itertools.
Обратите внимание, что создаваемый цикл не должен быть бесконечным.
 Предусмотрите условие его завершения.
'''
# а)
from itertools import count

for el in count(3):
    if el>10:
        break
    else:
        print(el)
# б)
from itertools import cycle

c = 1
for el in cycle([None, True, None, True, "RET", "RET", 678, 789]):
    if c > 15:
        break
    print(el)
    c += 1
'''
task 7
Реализовать генератор с помощью функции с ключевым словом yield, создающим очередное значение.
 При вызове функции должен создаваться объект-генератор.
 Функция вызывается следующим образом: for el in fact(n).
  Она отвечает за получение факториала числа.
   В цикле нужно выводить только первые n чисел, начиная с 1! и до n!.
Подсказка: факториал числа n — произведение чисел от 1 до n.
Например, факториал четырёх 4! = 1 * 2 * 3 * 4 = 24.
'''


def fact(p):
    x = 1
    for i in range(1, p + 1):
        x *= i
        yield x


p = int(input("От какого целого, положительного числа взять факториал? "))
for el in fact(p):
    print(el)
